name: Build LLVM Toolchain (Linux)

on:
  push:
    tags:
      - 'LLVM-LINUX-v*.*.*'

jobs:
  build-llvm-toolchain:
    runs-on: ubuntu-22.04 

    permissions:
      contents: write
  
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
  
    steps:
      - name: Generating Unique Identification
        run: |
          BASE_NAME=$(echo "$GITHUB_REF" | sed 's|^refs/tags/||')
          BUILD_ID="${BASE_NAME}-$GITHUB_RUN_ID" 
          
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_ID=$TAG_NAME" >> $GITHUB_ENV

          echo "Unique ID: $BUILD_ID"
          echo "Base name: $TAG_NAME"
    
      - name: Downloading LLVM project
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/llvm-project-17.0.6.src.tar.xz

      - name: Unpacking LLVM project 
        run: |
          tar -xf llvm-project-17.0.6.src.tar.xz
          mv llvm-project-17.0.6.src llvm-project

      - name: Installing dependencies
        run: |
          sudo apt-get install -y build-essential cmake ninja-build python3 libz-dev binutils
          sudo apt-get remove -y llvm-16* clang-16*
          sudo rm -rf /usr/lib/llvm-16

      - name: Preparing for build (LLVM TOOLS)
        run: |
          mkdir build
          cd build
        working-directory: llvm-project/llvm
          
      - name: Configuring CMake
        run: |
          cmake ../CMakeLists.txt -G Ninja -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DLLVM_INCLUDE_UTILS=OFF -DLLVM_ENABLE_PROJECTS="lld;clang" -DCMAKE_C_FLAGS="-Os -fno-exceptions -fomit-frame-pointer -fdata-sections -ffunction-sections" -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++ -Os -fno-exceptions -fomit-frame-pointer -fdata-sections -ffunction-sections -fno-rtti" -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_BUILD_TESTS=OFF -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_ENABLE_RUNTIMES="libc"
        working-directory: llvm-project/llvm/build

      - name: Building LLVM
        run: |
          ninja -j$(nproc) clang
          ninja -j$(nproc) lld
        working-directory: llvm-project/llvm/build

      - name: Packaging LLVM (LLVM Linker Libraries)
        run: |
          tar --format=pax -cJf linkers_libraries.tar.xz --exclude='*/*.o' --exclude='*/*.cmake' --exclude='*/*.d' lib
        working-directory: llvm-project/llvm/build

      - name: Optimizing LLVM (LLVM TOOLS, LINKERS & Clang)
        run: |
          strip --strip-all llvm/build/bin/clang llvm/build/bin/ld.lld llvm/build/bin/wasm-ld
        working-directory: llvm-project/
          
      - name: Releasing LLVM Toolchain
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_ID }}
          name: "LLVM Toolchain (Linux)"
          body: |
            ## LLVM Toolchain (Linux)
           
            LLVM (v17.0.6) binaries compiled with maximum optimizations for Linux environments.
      
            ### Components

            - `clang`: LLVM modern frontend compiler.
            - `ld.lld`: High-performance linker for x86_64 architectures.
            - `wasm-ld`: Wasmer linker.
            
          files: |
            llvm-project/llvm/build/bin/clang
            llvm-project/llvm/build/bin/ld.lld
            llvm-project/llvm/build/bin/wasm-ld
            
          draft: false
