name: Clang (Windows)
on:
  push:
    tags:
      - 'CLANG-WINDOWS-v*.*.*'
jobs:
  build-clang:
    runs-on: windows-2022
    permissions:
      contents: write
  
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    steps:
      - name: Generating Unique ID
        shell: pwsh
        run: |
          $BASE_NAME = "${{ github.ref }}".Replace('refs/tags/', '')
          $BUILD_ID = "${BASE_NAME}-${{ github.run_id }}"
          $TAG_NAME = "${{ github.ref }}".Replace('refs/tags/CLANG-WINDOWS-v', '')
          
          echo "BUILD_ID=$BUILD_ID" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "TAG_NAME=$TAG_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Unique ID: $BUILD_ID"
          echo "Tag version: $TAG_NAME"
    
      - name: Set up build environment
        uses: ilammy/msvc-dev-cmd@v1
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install build tools
        shell: pwsh
        run: |
          pip install ninja
          choco install 7zip -y
          ninja --version
          
      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Downloading LLVM project
        shell: pwsh
        run: |
          Write-Host "Downloading LLVM 17.0.6..."
          Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/llvm-project-17.0.6.src.tar.xz" -OutFile "llvm-project.tar.xz"
          
      - name: Unpacking LLVM project
        shell: pwsh
        run: |
          Write-Host "Extracting LLVM project..."
          7z x llvm-project.tar.xz -so | 7z x -si -ttar
          Rename-Item -Path "llvm-project-17.0.6.src" -NewName "llvm-project"
          
      - name: Preparing build directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "llvm-project\build" -Force
          New-Item -ItemType Directory -Path "clang-package" -Force
        
      - name: Configuring CMake build
        shell: pwsh
        run: |
          cd llvm-project\build
          Write-Host "Configuring LLVM/Clang build..."
          cmake ..\llvm -G Ninja `
            -DLLVM_ENABLE_PROJECTS="clang;lld" `
            -DLLVM_ENABLE_RUNTIMES="compiler-rt" `
            -DCMAKE_BUILD_TYPE=MinSizeRel `
            -DLLVM_TARGETS_TO_BUILD="X86" `
            -DLLVM_ENABLE_TERMINFO=OFF `
            -DLLVM_ENABLE_ZLIB=OFF `
            -DLLVM_ENABLE_LIBXML2=OFF `
            -DLLVM_INCLUDE_UTILS=OFF `
            -DLLVM_BUILD_TESTS=OFF `
            -DLLVM_BUILD_EXAMPLES=OFF `
            -DLLVM_INCLUDE_TESTS=OFF `
            -DLLVM_INCLUDE_EXAMPLES=OFF `
            -DLLVM_INCLUDE_DOCS=OFF `
            -DLLVM_INCLUDE_BENCHMARKS=OFF `
            -DLLVM_ENABLE_BINDINGS=OFF `
            -DLLVM_OPTIMIZED_TABLEGEN=ON `
            -DLLVM_USE_CRT_MINSIZEREL=MT
            
      - name: Building Clang and LLD
        shell: pwsh
        run: |
          cd llvm-project\build
          Write-Host "Building Clang..."
          ninja -j $env:NUMBER_OF_PROCESSORS clang
          Write-Host "Building LLD..."
          ninja -j $env:NUMBER_OF_PROCESSORS lld
          Write-Host "Building compiler-rt..."
          ninja -j $env:NUMBER_OF_PROCESSORS compiler-rt
          
      - name: Organizing package structure
        shell: pwsh
        run: |
          cd clang-package
          
          New-Item -ItemType Directory -Path "bin" -Force
          New-Item -ItemType Directory -Path "lib" -Force
          New-Item -ItemType Directory -Path "include" -Force
          
          Copy-Item "..\llvm-project\build\bin\clang.exe" -Destination "bin\"
          Copy-Item "..\llvm-project\build\bin\lld*.exe" -Destination "bin\"
          
          if (Test-Path "..\llvm-project\build\lib\clang") {
              Copy-Item "..\llvm-project\build\lib\clang" -Destination "lib\" -Recurse
          }
          
          if (Test-Path "..\llvm-project\build\lib\clang\17.0.6\include") {
              Copy-Item "..\llvm-project\build\lib\clang\17.0.6\include" -Destination "include\clang" -Recurse
          }
          
          Copy-Item "..\llvm-project\clang\lib\Headers\*" -Destination "include\" -Recurse -ErrorAction SilentlyContinue
          
      - name: Creating manifest
        shell: pwsh
        run: |
          cd clang-package
          $manifest = @{
              name = "clang"
              version = "${{ env.TAG_NAME }}"
              clang_version = "17.0.6"
              architecture = "x86_64"
              platform = "windows"
              build_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ" -AsUTC)
              build_id = "${{ env.BUILD_ID }}"
              language = "c/c++"
              type = "toolchain_bundle"
              components = @{
                  clang = "C/C++ compiler"
                  lld = "LLVM linker"
                  compiler_rt = "Runtime libraries"
                  headers = "Standard C headers"
              }
              features = @{
                  static_build = $true
                  size_optimized = $true
                  x86_target_only = $true
                  windows_native = $true
              }
              optimizations = @(
                  "size_optimized",
                  "static_crt",
                  "single_target"
              )
              file = "clang-windows-x86_64.zip"
              note = "Complete Clang toolchain with LLD linker and runtime libraries"
          }
          
          $manifest | ConvertTo-Json -Depth 4 | Out-File -FilePath "clang-manifest.json" -Encoding UTF8
          
      - name: Packaging Clang toolchain
        shell: pwsh
        run: |
          7z a -tzip clang-windows-x86_64.zip clang-package\*
          
      - name: Releasing Clang (Windows)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_ID }}
          name: "Clang x86_64 (Windows)"
          body: |
            ## Clang (Windows)
           
            Complete Clang C/C++ compiler toolchain with LLD linker for Windows x86_64.
            
          files: |
            clang-windows-x86_64.zip
            clang-package/clang-manifest.json
            
          draft: false
