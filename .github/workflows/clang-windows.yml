name: Clang (Windows)

on:
  push:
    tags:
      - 'CLANG-WINDOWS-v*.*.*'

jobs:
  build-clang:
    runs-on: windows-2022

    permissions:
      contents: write
  
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    steps:
      - name: Generating Unique ID
        shell: pwsh
        run: |
          $BASE_NAME = "${{ github.ref }}".Replace('refs/tags/', '')
          $BUILD_ID = "${BASE_NAME}"
          $TAG_NAME = "${{ github.ref }}".Replace('refs/tags/CLANG-WINDOWS-v', '')
          
          echo "BUILD_ID=$BUILD_ID" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "TAG_NAME=$TAG_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "BASE_NAME=$BASE_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append

          echo "Unique ID: $BUILD_ID"
          echo "Tag version: $TAG_NAME"
          echo "Base name: $BASE_NAME"
    
      - name: Set up build environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ninja
        shell: pwsh
        run: |
          pip install ninja
          ninja --version

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Downloading LLVM project
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/llvm-project-18.1.8.src.tar.xz" -OutFile "llvm-project-18.1.8.src.tar.xz"

      - name: Install 7zip
        shell: pwsh
        run: |
          choco install 7zip -y

      - name: Unpacking LLVM project
        shell: pwsh
        run: |
          7z x llvm-project-18.1.8.src.tar.xz -so | 7z x -si -ttar
          Rename-Item -Path "llvm-project-18.1.8.src" -NewName "llvm-project"

      - name: Preparing for build
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "llvm-project\llvm\build" -Force
          New-Item -ItemType Directory -Path "llvm-project\llvm\dist" -Force
        
      - name: Configuring CMake (Clang)
        shell: pwsh
        run: |
          cd llvm-project\llvm\build
          cmake ..\CMakeLists.txt -G Ninja `
          -DCMAKE_BUILD_TYPE=MinSizeRel `
          -DCMAKE_INSTALL_PREFIX="..\dist" `
          -DCMAKE_DISABLE_FIND_PACKAGE_LibXml2=TRUE `
          -DCMAKE_C_COMPILER_TARGET=x86_64-pc-windows-msvc `
          -DCMAKE_CXX_COMPILER_TARGET=x86_64-pc-windows-msvc `
          `
          -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" `
          -DLLVM_TARGETS_TO_BUILD="X86" `
          -DLLVM_OPTIMIZED_TABLEGEN=ON `
          -DLLVM_ENABLE_TERMINFO=OFF `
          -DLLVM_ENABLE_ZLIB=OFF `
          -DLLVM_ENABLE_LIBXML2=OFF `
          -DLLVM_ENABLE_ASSERTIONS=OFF `
          -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF `
          -DLLVM_ENABLE_DEBUG_RUNTIME=OFF `
          -DLLVM_USE_SPLIT_DWARF=OFF `
          -DLLVM_BUILD_TOOLS=OFF `
          -DLLVM_BUILD_UTILS=OFF `
          -DLLVM_BUILD_TESTS=OFF `
          -DLLVM_BUILD_EXAMPLES=OFF `
          -DLLVM_INCLUDE_EXAMPLES=OFF `
          -DLLVM_INCLUDE_DOCS=OFF `
          -DLLVM_INSTALL_BINUTILS_SYMLINKS=OFF `
          -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON `
          `
          -DCLANG_BUILD_TOOLS=OFF `
          -DCLANG_BUILD_TESTS=OFF `
          -DCLANG_ENABLE_STATIC_ANALYZER=OFF `
          -DCLANG_ENABLE_ARCMT=OFF `
          -DCLANG_TOOL_SCAN_BUILD_BUILD=OFF `
          -DCLANG_TOOL_SCAN_VIEW_BUILD=OFF `
          `
          -DCOMPILER_RT_BUILD_BUILTINS=ON `
          -DCOMPILER_RT_BUILD_CRT=ON `
          -DCOMPILER_RT_BUILD_SANITIZERS=OFF `
          -DCOMPILER_RT_BUILD_XRAY=OFF `
          -DCOMPILER_RT_BUILD_LIBFUZZER=OFF `
          -DCOMPILER_RT_BUILD_PROFILE=OFF `
          -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON `
          -DCOMPILER_RT_INCLUDE_TESTS=OFF

      - name: Building Clang and essential libraries
        shell: pwsh
        run: |
          cd llvm-project\llvm\build
          ninja -j $env:NUMBER_OF_PROCESSORS clang lld compiler-rt

      - name: Installing Clang and compiler-rt
        shell: pwsh
        run: |
          cd llvm-project\llvm\build
          ninja install

      - name: Creating manifests
        shell: pwsh
        run: |
          cd llvm-project\llvm\build\bin
          
          $ClangManifest = @{
              name = "clang"
              version = "${{ env.TAG_NAME }}"
              llvm_version = "18.1.8"
              architecture = "x86_64"
              platform = "windows"
              build_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ" -AsUTC)
              build_id = "${{ env.BUILD_ID }}"
              optimizations = @(
                  "size_optimized",
                  "lto_enabled",
                  "minimal_runtime"
              )
              components = @(
                  "clang_compiler",
                  "lld_linker",
                  "compiler_rt_builtins",
                  "compiler_rt_crt"
              )
              file = "clang-windows-x86_64.zip"
              executables = @(
                  "clang.exe",
                  "clang++.exe",
                  "lld.exe"
              )
              runtime_libraries = @(
                  "libclang_rt.builtins-x86_64.lib",
                  "clang_rt.crt-x86_64.lib"
              )
          }
          
          $ClangManifest | ConvertTo-Json -Depth 10 | Out-File -FilePath "clang-manifest.json" -Encoding UTF8

      - name: Packaging Clang binaries
        shell: pwsh
        run: |
          cd llvm-project\llvm
          
          7z a -tzip clang-windows-x86_64.zip build/bin build/lib dist/include

      - name: Releasing Clang (Windows)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_ID }}
          name: "Clang x86_64 (Windows)"
          body: |
            ## Clang x86_64
           
            Clang compiler with essential libraries and compiler-rt runtime for Windows x86_64 environments.
            
          files: |
            llvm-project/llvm/clang-windows-x86_64.zip
            llvm-project/llvm/build/bin/clang-manifest.json
            
          draft: false
